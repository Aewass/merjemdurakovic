---
import Layout from '../../layouts/Layout.astro';
import Footer from '../../components/Footer.astro';
import { ArrowLeft } from 'lucide-astro';

// Update the types for our data structure
type CatalogImage = {
  src: string;
  alt: string;
  caption?: string;
};

type CatalogItem = {
  name: string;
  description: string;
  images: CatalogImage[];
};

type CategoryData = {
  number: string;
  title: string;
  category: string;
  description: string;
  items: CatalogItem[];
};

export function getStaticPaths() {
  return [
    {
      params: { id: 'branding' },
      props: {
        category: {
          number: "01",
          title: "Branding",
          category: "Category",
          description: "My branding work focuses on creating distinctive and memorable brand identities that resonate with target audiences. Each project combines strategic thinking with creative design, encompassing logo development, visual identity systems, and comprehensive brand guidelines. I ensure that every element works harmoniously to communicate the brand's values and story effectively.",
          items: [
            {
              name: "Harvest Harmony",
              description: "Brand identity design for Harvest Harmony",
              images: [
                { 
                  src: "/branding/branding-harvest-harmony/1.jpg", 
                  alt: "Harvest Harmony brand identity",
                  caption: "Logo design and visual identity" 
                },
                { 
                  src: "/branding/branding-harvest-harmony/2.jpg", 
                  alt: "Harvest Harmony logo design",
                  caption: "Logo variations and applications" 
                },
                { 
                  src: "/branding/branding-harvest-harmony/3.jpg", 
                  alt: "Harvest Harmony brand applications",
                  caption: "Brand applications and stationery" 
                },
                { 
                  src: "/branding/branding-harvest-harmony/4.jpg", 
                  alt: "Harvest Harmony packaging design",
                  caption: "Packaging design solutions" 
                },
                { 
                  src: "/branding/branding-harvest-harmony/5.jpg", 
                  alt: "Harvest Harmony brand guidelines",
                  caption: "Brand style guide and standards" 
                }
              ]
            }
          ]
        } as CategoryData
      }
    },
    {
      params: { id: 'catalogs' },
      props: {
        category: {
          number: "02",
          title: "Brochures and Catalogs",
          category: "Category",
          description: "This section showcases my designs for catalogs and brochures, including reports, travel guides, and product brochures. I focus on creating clear and engaging layouts that effectively communicate the client's message, ensuring a balance of aesthetics and functionality. These designs reflect my ability to adapt to different industries while maintaining a strong and consistent visual style.",
          items: [
            {
              name: "iForm",
              description: "Carbon Footprint Report for iForm",
              images: [
                { 
                  src: "/catalogs/catalog-iform/1.png", 
                  alt: "iform catalog page 1",
                  caption: "Product showcase page" 
                },
                { 
                  src: "/catalogs/catalog-iform/2.png", 
                  alt: "iform catalog page 2",
                  caption: "Technical specifications" 
                }
              ]
            },
            {
              name: "Ležaj Trade",
              description: "Catalog for Industrial Sales Program",
              images: [
                { src: "/catalogs/catalog-lezaj-trade/1.png", alt: "Lezaj Trade catalog page 1" },
                { src: "/catalogs/catalog-lezaj-trade/2.png", alt: "Lezaj Trade catalog page 2" },
                { src: "/catalogs/catalog-lezaj-trade/3.png", alt: "Lezaj Trade catalog page 3" },
              ]
            },
            {
              name: "Mega Trans",
              description: "Carbon Footprint Report for Mega Trans",
              images: [
                { src: "/catalogs/catalog-mega/1.png", alt: "Mega catalog page 1" },
                { src: "/catalogs/catalog-mega/2.png", alt: "Mega catalog page 2" },
                { src: "/catalogs/catalog-mega/3.png", alt: "Mega catalog page 3" }
              ]
            },
            {
              name: "Shams Travel",
              description: "Catalog for the Travel Agency and Their Offers",
              images: [
                { src: "/catalogs/catalog-shams/1.png", alt: "Shams catalog page 1" },
                { src: "/catalogs/catalog-shams/2.png", alt: "Shams catalog page 2" },
                { src: "/catalogs/catalog-shams/3.png", alt: "Shams catalog page 3" }
              ]
            },
            {
              name: "Stanić",
              description: "Carbon Footprint Report for Stanić",
              images: [
                { src: "/catalogs/catalog-stanic/1.png", alt: "Stanic catalog page 1" },
                { src: "/catalogs/catalog-stanic/2.png", alt: "Stanic catalog page 2" },
                { src: "/catalogs/catalog-stanic/3.jpg", alt: "Stanic catalog page 3" },
              ]
            },
            {
              name: "ZGI",
              description: "Carbon Footprint Report for ZGI 2023. and 2024.",
              images: [
                { src: "/catalogs/catalog-zgi/1.jpg", alt: "ZGI catalog page 1" },
                { src: "/catalogs/catalog-zgi/2.jpg", alt: "ZGI catalog page 2" },
                { src: "/catalogs/catalog-zgi/3.jpg", alt: "ZGI catalog page 3" },
                { src: "/catalogs/catalog-zgi2/1.jpg", alt: "ZGI Vol.2 catalog page 1" },
                { src: "/catalogs/catalog-zgi2/2.jpg", alt: "ZGI Vol.2 catalog page 2" },
                { src: "/catalogs/catalog-zgi2/3.jpg", alt: "ZGI Vol.2 catalog page 3" }
              ]
            },
           
          ]
        } as CategoryData
      }
    },
    {
      params: { id: 'visit-cards' },
      props: {
        category: {
          number: "03",
          title: "Visit Cards",
          category: "Category",
          description: "My business card designs blend form and function to create lasting first impressions. Each design is carefully crafted to reflect the client's brand identity while ensuring optimal readability and professional presentation. I focus on innovative layouts, typography, and material choices to make each card a powerful networking tool that stands out in today's digital age.",
          items: [
            {
              name: "Ležaj Trade",
              description: "A business card that reflects the identity of Ležaj Trade, a company specializing in the retail and wholesale of industrial bearings, accessories, and related products. The design focuses on clarity and functionality, with easily accessible contact information. A cohesive layout and consistent branding ensure a professional appearance.",
              images: [
                { 
                  src: "/visit-cards/visit-card-lezaj-trade/1.jpg", 
                  alt: "Ležaj Trade visit card",
                  caption: "Front design" 
                }
              ]
            },
            {
              name: "ZerroMax",
              description: "This business card for Zerromax incorporates design elements that evoke foundations and construction, reflecting their modular home building focus. The minimalist style with subtle dynamic details symbolizes the company's progress and innovation.",
              images: [
                { 
                  src: "/visit-cards/visit-card-zerro-max/2.jpg", 
                  alt: "ZerroMax visit card",
                  caption: "Complete business card design" 
                }
              ]
            }
          ]
        } as CategoryData
      }
    },
    {
      params: { id: 'books' },
      props: {
        category: {
          number: "04",
          title: "Books",
          category: "Category",
          description: "My book design work combines artistic vision with practical functionality to create engaging reading experiences. Each project carefully considers typography, layout, and visual hierarchy to enhance readability while maintaining aesthetic appeal. I specialize in creating covers and internal layouts that capture the essence of the content while meeting industry standards for both print and digital formats.",
          items: [
            {
              name: "Dramaturgija Evropskog Lutkarstva Fragmenti",
              description: "Cover design for a book about puppetry",
              images: [
                { 
                  src: "/books/book/1.jpg", 
                  alt: "Book design page 1",
                  caption: "Cover design" 
                },
                { 
                  src: "/books/book/2.jpg", 
                  alt: "Book design page 2",
                  caption: "Internal layout" 
                },
                { 
                  src: "/books/book/3.jpg", 
                  alt: "Book design page 3",
                  caption: "Chapter opening page" 
                }
              ]
            }
          ]
        } as CategoryData
      }
    },
    {
      params: { id: 'print-media' },
      props: {
        category: {
          number: "05",
          title: "Various Print Media Works",
          category: "Category",
          description: "My print media portfolio showcases versatile design solutions across various formats including flyers, folders, and trifold brochures. Each piece is thoughtfully designed to effectively communicate the client's message through strategic use of layout, typography, and visual elements. I prioritize both aesthetic appeal and practical functionality, ensuring that each design serves its intended purpose while maintaining visual impact.",
          items: [
            {
              name: "Folder ZerroMax",
              description: "Folder design for Zerromax",
              images: [
                { 
                  src: "/print-media/fascicle-zerromax/1.jpg", 
                  alt: "Zerromax folder design page 1",
                  caption: "Front cover design" 
                },
                { 
                  src: "/print-media/fascicle-zerromax/2.jpg", 
                  alt: "Zerromax folder design page 2",
                  caption: "Interior spread" 
                }
              ]
            },
            {
              name: "Flyer AdBlue",
              description: "Promotional flyer for AdBlue",
              images: [
                { 
                  src: "/print-media/flyer-adblue/1.jpg", 
                  alt: "AdBlue flyer design",
                  caption: "Single page promotional flyer" 
                }
              ]
            },
            {
              name: "Flyer Palma Pogrebno",
              description: "Promotional flyer for Palma Pogrebno",
              images: [
                { 
                  src: "/print-media/flyer-palma/1.jpg", 
                  alt: "Palma flyer design",
                  caption: "Product promotion flyer" 
                }
              ]
            },
            {
              name: "Flyer Phoenix Restaurant",
              description: "Promotional flyer for Phoenix Restaurant",
              images: [
                { 
                  src: "/print-media/flyer-phoenix/1.jpg", 
                  alt: "Phoenix flyer design",
                  caption: "Event promotional material" 
                }
              ]
            },
            {
              name: "Flyer Shams Travel",
              description: "Promotional flyer for Shams Travel",
              images: [
                { 
                  src: "/print-media/flyer-shams/1.jpg", 
                  alt: "Shams flyer design",
                  caption: "Product showcase flyer" 
                }
              ]
            },
            {
              name: "Trifold Artane",
              description: "Trifold brochure design for Artane",
              images: [
                { 
                  src: "/print-media/trifold-artane/1.jpg", 
                  alt: "Artane trifold brochure page 1",
                  caption: "Front panel design" 
                },
                { 
                  src: "/print-media/trifold-artane/2.jpg", 
                  alt: "Artane trifold brochure page 2",
                  caption: "Interior panels layout" 
                },
                { 
                  src: "/print-media/trifold-artane/3.jpg", 
                  alt: "Artane trifold brochure page 3",
                  caption: "Back panel design" 
                }
              ]
            }
          ]
        } as CategoryData
      }
    }
  ];
}

const { id } = Astro.params;
const { category } = Astro.props;
---

<Layout title={`${category.title} - ${category.category}`}>
  <main class="relative min-h-screen">
    <div class="fixed inset-0">
      <div class={`absolute inset-0 bg-[radial-gradient(circle_at_top,_var(--tw-gradient-stops))] ${
        id === 'visit-cards'
          ? 'from-rose-200/40 via-rose-100/30 to-transparent' 
          : id === 'books'
            ? 'from-emerald-200/40 via-emerald-100/30 to-transparent'
            : id === 'print-media'
              ? 'from-amber-200/40 via-amber-100/30 to-transparent'
              : id === 'branding'
                ? 'from-indigo-200/40 via-indigo-100/30 to-transparent'
                : 'from-purple-200/40 via-purple-100/30 to-transparent'
      }`}></div>
    </div>

    <div class="relative">
      <article class="pt-32 pb-24">
        <div class="max-w-6xl mx-auto px-6 sm:px-8">
          <!-- Back Button -->
          <a 
            href="/#portfolio" 
            class={`
              inline-flex 
              items-center 
              gap-2 
              text-gray-500 
              ${
                id === 'visit-cards' ? 'hover:text-rose-600' : 
                id === 'books' ? 'hover:text-emerald-600' : 
                id === 'print-media' ? 'hover:text-amber-600' :
                id === 'branding' ? 'hover:text-indigo-600' :
                'hover:text-purple-600'
              }
              transition-colors 
              duration-300 
              mb-12 
              group
            `}
          >
            <ArrowLeft class="w-4 h-4 group-hover:-translate-x-1 transition-transform duration-300" />
            <span class="text-sm">Back to Portfolio</span>
          </a>

          <!-- Header -->
          <header class="mb-16">
            <div>
              <div class={`flex items-center gap-2 ${
                id === 'visit-cards' ? 'text-rose-600' : 
                id === 'books' ? 'text-emerald-600' : 
                id === 'print-media' ? 'text-amber-600' :
                id === 'branding' ? 'text-indigo-600' :
                'text-purple-600'
              } mb-4`}>
                <span class="font-mono">{category.number}</span>
                <span class="text-gray-300">—</span>
                <span>{category.category}</span>
              </div>
              <h1 class="text-5xl font-bold mb-6">
                {category.title}
              </h1>
              <p class="text-xl text-gray-600 max-w-2xl">
                {category.description}
              </p>
            </div>
          </header>

          <!-- Catalogs List -->
          <div class="space-y-40">
            {category.items.map(item => (
              <div class="catalog-item">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 md:gap-16 items-start">
                  <div>
                    <h2 class="text-4xl font-bold mb-4">{item.name}</h2>
                    <p class="text-lg text-gray-600 mb-8">{item.description}</p>
                    <div class="flex items-center">
                      <span class={`inline-flex items-center py-1.5 px-3 ${
                        id === 'visit-cards' ? 'bg-rose-50/70' : 
                        id === 'books' ? 'bg-emerald-50/70' : 
                        id === 'print-media' ? 'bg-amber-50/70' :
                        id === 'branding' ? 'bg-indigo-50/70' :
                        'bg-purple-50/70'
                      } text-sm text-gray-800 rounded-full`}>
                        <span class={`w-1.5 h-1.5 ${
                          id === 'visit-cards' ? 'bg-rose-500' : 
                          id === 'books' ? 'bg-emerald-500' : 
                          id === 'print-media' ? 'bg-amber-500' :
                          id === 'branding' ? 'bg-indigo-500' :
                          'bg-purple-500'
                        } rounded-full mr-2`}></span>
                        {item.images.length} {item.images.length === 1 ? 'page' : 'pages'}
                      </span>
                    </div>
                  </div>
                  
                  {/* Check if it's a visit card (single image) */}
                  {id === 'visit-cards' ? (
                    <div class="relative perspective-1000 max-w-lg mx-auto lg:mx-0">
                      {item.images.map((image, index) => (
                        <div 
                          class="relative bg-white rounded-lg shadow-xl border border-rose-200 overflow-hidden transition-all duration-500 hover:shadow-2xl hover:-translate-y-2"
                        >
                          <div class="group cursor-pointer">
                            <img 
                              src={image.src} 
                              alt={image.alt} 
                              class="w-full h-full object-cover hover:scale-105 transition-transform duration-500"
                              data-fullview={image.src}
                            />
                          </div>
                        </div>
                      ))}
                      <div class="absolute -bottom-4 -right-4 -z-10 w-full h-full bg-gradient-to-r from-rose-400/20 to-rose-200/20 rounded-lg"></div>
                    </div>
                  ) : (
                    /* Mosaic Grid for Catalogs */
                    <div class="image-mosaic relative">
                      <div class="grid grid-cols-2 md:grid-cols-3 gap-3">
                        {item.images.map((image, index) => (
                          <div class={`overflow-hidden rounded-lg bg-white shadow-md transition-all duration-300 hover:shadow-xl ${
                            index === 0 ? 'col-span-2 row-span-2' : ''
                          }`}>
                            <div class="relative group cursor-pointer aspect-[4/3]">
                              <img 
                                src={image.src} 
                                alt={image.alt || `${item.name} image ${index + 1}`}
                                class="w-full h-full object-cover hover:scale-105 transition-transform duration-500"
                                data-fullview={image.src}
                              />
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  <!-- Full-size image viewer (hidden by default) -->
                  <div id="imageViewer" class="fixed inset-0 bg-black/90 z-50 hidden flex items-center justify-center">
                    <button id="closeViewer" class="absolute top-6 right-6 text-white hover:text-gray-300">
                      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-8 h-8">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                      </svg>
                    </button>
                    <button id="prevImage" class="absolute left-4 md:left-6 top-1/2 -translate-y-1/2 text-white hover:text-gray-300 bg-black/50 hover:bg-black/70 p-3 rounded-full transition-all z-10">
                      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-8 h-8 md:w-10 md:h-10">
                        <polyline points="15 18 9 12 15 6"></polyline>
                      </svg>
                    </button>
                    <img id="fullImage" src="" alt="Full size image" class="max-h-[90vh] max-w-[90vw] object-contain" />
                    <button id="nextImage" class="absolute right-4 md:right-6 top-1/2 -translate-y-1/2 text-white hover:text-gray-300 bg-black/50 hover:bg-black/70 p-3 rounded-full transition-all z-10">
                      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-8 h-8 md:w-10 md:h-10">
                        <polyline points="9 18 15 12 9 6"></polyline>
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </article>

      <Footer />
    </div>
  </main>
</Layout>

<script>
  // Initialize image viewers for all images with data-fullview
  let currentImages: string[] = [];
  let currentIndex = 0;
  
  // Setup touch variables
  let touchStartX = 0;
  let touchEndX = 0;
  
  // Handle swipe direction
  function handleSwipe() {
    const viewer = document.getElementById('imageViewer');
    if (viewer && !viewer.classList.contains('hidden') && currentImages.length > 1) {
      // Minimum swipe distance (in pixels) to trigger navigation
      const swipeThreshold = 50;
      const swipeDistance = touchEndX - touchStartX;
      
      // Right to left swipe (next image)
      if (swipeDistance < -swipeThreshold) {
        currentIndex = (currentIndex + 1) % currentImages.length;
        updateViewerImage();
      }
      // Left to right swipe (previous image)
      else if (swipeDistance > swipeThreshold) {
        currentIndex = (currentIndex - 1 + currentImages.length) % currentImages.length;
        updateViewerImage();
      }
    }
  }
  
  // Setup touch events for fullscreen navigation
  function setupTouchEvents() {
    const fullImage = document.getElementById('fullImage');
    if (fullImage) {
      // Clean up previous listeners if any
      fullImage.removeEventListener('touchstart', handleTouchStart);
      fullImage.removeEventListener('touchend', handleTouchEnd);
      
      // Add new listeners
      fullImage.addEventListener('touchstart', handleTouchStart, { passive: true });
      fullImage.addEventListener('touchend', handleTouchEnd, { passive: true });
    }
  }
  
  // Touch event handlers
  function handleTouchStart(e: TouchEvent) {
    touchStartX = e.changedTouches[0].screenX;
  }
  
  function handleTouchEnd(e: TouchEvent) {
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
  }
  
  // Setup image loading
  document.querySelectorAll('img[data-fullview]').forEach(img => {
    // Create and add loading indicator
    const parent = img.parentElement;
    if (parent) {
      // Add a loading indicator div
      const loadingDiv = document.createElement('div');
      loadingDiv.className = 'loading-indicator';
      parent.appendChild(loadingDiv);
      
      // Handler to remove loading indicator
      const removeLoading = () => {
        img.classList.add('loaded');
        loadingDiv.remove();
      };
      
      // Add load event to remove loading state
      img.addEventListener('load', removeLoading);
      
      // For already loaded images
      if ((img as HTMLImageElement).complete) {
        removeLoading();
      }
    }
    
    img.addEventListener('click', () => {
      const fullview = img.getAttribute('data-fullview');
      const viewer = document.getElementById('imageViewer');
      const fullImage = document.getElementById('fullImage') as HTMLImageElement;
      
      if (fullview && viewer && fullImage) {
        // Reset the loaded class
        fullImage.classList.remove('loaded');
        
        // Add loading indicator for fullscreen view
        const fullImageContainer = fullImage.parentElement;
        let loadingIndicator = document.getElementById('fullImageLoading');
        
        if (!loadingIndicator && fullImageContainer) {
          loadingIndicator = document.createElement('div');
          loadingIndicator.id = 'fullImageLoading';
          loadingIndicator.className = 'loading-indicator fullscreen-loading';
          fullImageContainer.appendChild(loadingIndicator);
        }
        
        // Collect all images in the same catalog item
        const catalogItem = img.closest('.catalog-item');
        currentImages = [];
        
        if (catalogItem) {
          catalogItem.querySelectorAll('img[data-fullview]').forEach(itemImg => {
            const imgSrc = itemImg.getAttribute('data-fullview');
            if (imgSrc) {
              currentImages.push(imgSrc);
            }
          });
        }
        
        // Set current index to clicked image
        currentIndex = currentImages.indexOf(fullview);
        
        // Set image source
        fullImage.src = fullview;
        fullImage.alt = (img as HTMLImageElement).alt;
        
        // Add load event for fullscreen image
        fullImage.onload = () => {
          fullImage.classList.add('loaded');
          if (loadingIndicator) {
            loadingIndicator.style.display = 'none';
          }
          // Setup touch events after image has loaded
          setupTouchEvents();
        };
        
        // For cached images
        if (fullImage.complete) {
          fullImage.classList.add('loaded');
          if (loadingIndicator) {
            loadingIndicator.style.display = 'none';
          }
          // Setup touch events for cached images
          setupTouchEvents();
        } else if (loadingIndicator) {
          loadingIndicator.style.display = 'block';
        }
        
        viewer.classList.remove('hidden');
        viewer.classList.add('flex');
        
        // Prevent scrolling on body
        document.body.style.overflow = 'hidden';
      }
    });
  });
  
  // Navigate to previous image
  document.getElementById('prevImage')?.addEventListener('click', () => {
    if (currentImages.length > 1) {
      currentIndex = (currentIndex - 1 + currentImages.length) % currentImages.length;
      updateViewerImage();
    }
  });
  
  // Navigate to next image
  document.getElementById('nextImage')?.addEventListener('click', () => {
    if (currentImages.length > 1) {
      currentIndex = (currentIndex + 1) % currentImages.length;
      updateViewerImage();
    }
  });
  
  // Update the viewer image based on current index
  function updateViewerImage() {
    const fullImage = document.getElementById('fullImage') as HTMLImageElement;
    const loadingIndicator = document.getElementById('fullImageLoading');
    
    if (fullImage && currentImages[currentIndex]) {
      // Reset loaded state
      fullImage.classList.remove('loaded');
      
      // Show loading indicator
      if (loadingIndicator) {
        loadingIndicator.style.display = 'block';
      }
      
      // Set new image source
      fullImage.src = currentImages[currentIndex];
      
      // Find the original image to get its alt text
      document.querySelectorAll('img[data-fullview]').forEach(img => {
        if (img.getAttribute('data-fullview') === currentImages[currentIndex]) {
          fullImage.alt = (img as HTMLImageElement).alt;
        }
      });
      
      // Add load event
      fullImage.onload = () => {
        fullImage.classList.add('loaded');
        if (loadingIndicator) {
          loadingIndicator.style.display = 'none';
        }
      };
      
      // For cached images
      if (fullImage.complete) {
        fullImage.classList.add('loaded');
        if (loadingIndicator) {
          loadingIndicator.style.display = 'none';
        }
      }
    }
  }
  
  // Close viewer
  document.getElementById('closeViewer')?.addEventListener('click', () => {
    const viewer = document.getElementById('imageViewer');
    if (viewer) {
      viewer.classList.add('hidden');
      viewer.classList.remove('flex');
      
      // Restore scrolling
      document.body.style.overflow = '';
    }
  });
  
  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    const viewer = document.getElementById('imageViewer');
    if (viewer && !viewer.classList.contains('hidden')) {
      if (e.key === 'Escape') {
        viewer.classList.add('hidden');
        viewer.classList.remove('flex');
        document.body.style.overflow = '';
      } else if (e.key === 'ArrowLeft') {
        if (currentImages.length > 1) {
          currentIndex = (currentIndex - 1 + currentImages.length) % currentImages.length;
          updateViewerImage();
        }
      } else if (e.key === 'ArrowRight') {
        if (currentImages.length > 1) {
          currentIndex = (currentIndex + 1) % currentImages.length;
          updateViewerImage();
        }
      }
    }
  });
  
  // Pre-load adjacent images for smoother navigation
  function preloadAdjacentImages() {
    if (currentImages.length <= 1) return;
    
    const nextIndex = (currentIndex + 1) % currentImages.length;
    const prevIndex = (currentIndex - 1 + currentImages.length) % currentImages.length;
    
    if (currentImages[nextIndex]) {
      const nextImg = new Image();
      nextImg.src = currentImages[nextIndex];
    }
    
    if (currentImages[prevIndex]) {
      const prevImg = new Image();
      prevImg.src = currentImages[prevIndex];
    }
  }
  
  // Preload adjacent images when current image is loaded
  document.getElementById('fullImage')?.addEventListener('load', () => {
    preloadAdjacentImages();
  });
</script>

<style>
  .image-mosaic img {
    transition: transform 0.3s ease;
  }
  
  .image-mosaic img:hover {
    transform: scale(1.05);
  }

  /* Image loading styles */
  .loading-indicator {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #f3f4f6;
    z-index: 1;
    overflow: hidden;
  }
  
  .loading-indicator::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.6), transparent);
    animation: shimmer 1.5s infinite;
    transform: translateX(-100%);
  }
  
  .fullscreen-loading {
    background-color: transparent;
  }
  
  .fullscreen-loading::after {
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
  }

  img {
    opacity: 0;
    transition: opacity 0.3s ease;
    position: relative;
    z-index: 2;
  }

  img.loaded {
    opacity: 1;
  }

  @keyframes shimmer {
    100% {
      transform: translateX(100%);
    }
  }

  #fullImage {
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  #fullImage.loaded {
    opacity: 1;
  }
</style> 