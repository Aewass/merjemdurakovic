---
import { ArrowRight } from 'lucide-astro';

interface Props {
  number: string;
  category: string;
  title: string;
  description: string;
  tags: string[];
  color: 'purple' | 'rose' | 'emerald' | 'amber' | 'indigo' | 'cyan';
  images: Array<{ src: string; alt: string; }>;
  name?: string;
  catalogs?: Array<{
    name: string;
    images: Array<{ src: string; alt: string; }>;
  }>;
  singleImageDesign?: boolean;
}

const { number, category, title, description, tags, color, images, name = "", catalogs = [], singleImageDesign = false } = Astro.props;

const colorClasses = {
  purple: {
    text: "text-purple-600",
    border: "border-purple-200",
    shadow: "shadow-purple-200/20",
    gradient: "from-purple-400/20 to-purple-200/20",
    tag: "bg-purple-50"
  },
  rose: {
    text: "text-rose-600",
    border: "border-rose-200",
    shadow: "shadow-rose-200/20",
    gradient: "from-rose-400/20 to-rose-200/20",
    tag: "bg-rose-50"
  },
  emerald: {
    text: "text-emerald-600",
    border: "border-emerald-200",
    shadow: "shadow-emerald-200/20",
    gradient: "from-emerald-400/20 to-emerald-200/20",
    tag: "bg-emerald-50"
  },
  amber: {
    text: "text-amber-600",
    border: "border-amber-200",
    shadow: "shadow-amber-200/20",
    gradient: "from-amber-400/20 to-amber-200/20",
    tag: "bg-amber-50"
  },
  indigo: {
    text: "text-indigo-600",
    border: "border-indigo-200",
    shadow: "shadow-indigo-200/20",
    gradient: "from-indigo-400/20 to-indigo-200/20",
    tag: "bg-indigo-50"
  },
  cyan: {
    text: "text-cyan-600",
    border: "border-cyan-200",
    shadow: "shadow-cyan-200/20",
    gradient: "from-cyan-400/20 to-cyan-200/20",
    tag: "bg-cyan-50"
  }
};

// For different category types
const isBooks = name === 'books';
const isPrintMedia = name === 'print-media';
const isBranding = name === 'branding';
const isSocialMedia = name === 'social-media';

// Select images based on category
let displayImages: Array<{ src: string; alt: string; }> = [];

// Get feature images for each category
if (catalogs && catalogs.length > 0) {
  // Special selection for print media to showcase variety
  if (isPrintMedia) {
    // Show a mix of different items
    displayImages = [
      catalogs[0].images[0], // fascicle
      catalogs[6].images[0], // trifold
      catalogs[1].images[0], // flyer adblue
      catalogs[2].images[0], // flyer doma
      catalogs[4].images[0], // flyer phoenix
      catalogs[5].images[0]  // flyer shams
    ];
  } 
  // Books should show all images from the first book
  else if (isBooks) {
    displayImages = catalogs[0].images;
  }
  // Branding projects should show selected images for better visual representation
  else if (isBranding && catalogs[0].images.length >= 3) {
    displayImages = [
      catalogs[0].images[0], // Logo/main brand identity
      catalogs[0].images[1], // Brand applications
      catalogs[0].images[2]  // Marketing materials
    ];
  }
  // Visit cards and catalogs show first image from first few catalogs
  else {
    displayImages = catalogs.slice(0, Math.min(5, catalogs.length))
      .map(catalog => catalog.images[0]);
  }
} else {
  displayImages = images;
}
---

<div class="grid grid-cols-1 md:grid-cols-2 gap-12 items-center">
  {/* Project Info - Left Side */}
  <div>
    <span class={`${colorClasses[color].text} mb-4 block flex items-center gap-2`}>
      <span class="font-mono">{number}</span>
      <span class="text-gray-300">â€”</span>
      <span>{category}</span>
    </span>
    
    <h3 class="text-4xl font-bold mb-4">{title}</h3>
    <p class="text-gray-600 text-lg mb-8 max-w-2xl">{description}</p>
    
    {/* Tags */}
    <div class="flex flex-wrap gap-3 mb-8">
      {tags.map(tag => (
        <span class={`px-4 py-2 ${colorClasses[color].tag} rounded-full text-gray-900 text-sm`}>
          {tag}
        </span>
      ))}
    </div>

    {/* Add View Category Button */}
    <a
      href={`/category/${name}`}
      class={`
        inline-flex
        items-center
        gap-2
        ${colorClasses[color].text}
        font-medium
        text-lg
        hover:opacity-80
        transition-all
        duration-300
        group
      `}
    >
      <span>View Category</span>
      <ArrowRight class="w-5 h-5 group-hover:translate-x-1 transition-transform duration-300" />
    </a>
  </div>

  {/* Project Images - Right Side */}
  <div class="relative">
    {isSocialMedia ? (
      <div class="social-media-carousel relative aspect-[4/3] rounded-lg overflow-hidden">
        <div 
          class="swiper-container h-full"
          data-catalogs={JSON.stringify(catalogs)}
        >
          <div class="swiper-wrapper">
            {catalogs?.flatMap((company) => 
              company.images.map((image) => (
                <div class="swiper-slide">
                  <img 
                    src={image.src} 
                    alt={image.alt} 
                    class="max-w-full max-h-full w-auto h-auto object-contain"
                  />
                </div>
              ))
            )}
          </div>
          
          {/* Minimal Top Left Style */}
          <div class="company-name absolute top-3 left-3 z-10 bg-white/80 backdrop-blur-sm px-3 py-1.5 rounded-lg text-gray-800 text-sm font-medium border border-gray-100/50 transition-all duration-300"></div>

          <div class="swiper-button-prev !bg-white/90 backdrop-blur-sm border border-gray-100/50 !w-8 !h-8 after:!text-xs"></div>
          <div class="swiper-button-next !bg-white/90 backdrop-blur-sm border border-gray-100/50 !w-8 !h-8 after:!text-xs"></div>
        </div>
      </div>
    ) : (
      <div class="grid grid-cols-3 gap-3 aspect-[4/3]">
        {displayImages.map((image, index) => (
          <div 
            class={`
              mosaic-item
              overflow-hidden 
              rounded-lg 
              bg-white 
              shadow-md 
              border 
              ${colorClasses[color].border}
              transition-all
              duration-300
              hover:shadow-xl
              hover:-translate-y-2
              hover:z-10
              relative
              ${index === 0 ? 'col-span-2 row-span-2' : ''}
            `}
          >
            <div class="w-full h-full relative overflow-hidden">
              <img 
                src={image.src} 
                alt={image.alt} 
                class="w-full h-full object-cover transform transition-transform duration-500 hover:scale-105"
              />
            </div>
            
            {/* Decorative corner accent */}
            <div class={`
              absolute 
              top-0 
              right-0 
              w-12 
              h-12 
              bg-gradient-to-bl 
              ${colorClasses[color].gradient} 
              to-transparent
              opacity-60
              rounded-bl-xl
            `}></div>
          </div>
        ))}
        
        {/* Background Element */}
        <div class={`
          absolute 
          -bottom-4 
          -right-4 
          -z-10 
          w-full 
          h-full 
          bg-gradient-to-r 
          rounded-lg 
          opacity-20 
          ${colorClasses[color].gradient}
        `}></div>
      </div>
    )}
  </div>
</div>

<style>
  .mosaic-item {
    transform-origin: center center;
    backface-visibility: hidden;
  }
  
  .mosaic-item:hover {
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1);
  }

  /* Carousel Styles */
  .social-media-carousel {
    position: relative;
    background: #f8f9fa;
    border-radius: 0.5rem;
    overflow: hidden;
  }

  .swiper-container {
    width: 100%;
    height: 100%;
  }

  .swiper-slide {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
  }

  .swiper-slide img {
    max-width: 100%;
    max-height: 100%;
    width: auto;
    height: auto;
    object-fit: contain;
  }

  /* Navigation buttons */
  .swiper-button-prev,
  .swiper-button-next {
    color: #0891b2 !important; /* Cyan-600 */
    background: rgba(255, 255, 255, 0.9);
    border-radius: 50%;
    width: 40px !important;
    height: 40px !important;
    opacity: 1 !important;
    display: flex !important;
    pointer-events: auto !important;
    cursor: pointer !important;
    z-index: 20 !important;
    transition: all 0.2s ease;
  }

  .swiper-button-prev:hover,
  .swiper-button-next:hover {
    background: rgba(255, 255, 255, 1);
    transform: scale(1.05);
    box-shadow: 0 4px 12px rgba(8, 145, 178, 0.1); /* Cyan shadow */
  }

  .swiper-button-prev:after,
  .swiper-button-next:after {
    font-size: 14px !important;
    font-weight: bold;
  }

  .company-name {
    font-size: 0.875rem;
    letter-spacing: 0.025em;
    transform: translateY(0);
    opacity: 0.95;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }

  .company-name:hover {
    transform: translateY(-1px);
    background-color: rgba(255, 255, 255, 0.9);
    box-shadow: 0 4px 12px rgba(8, 145, 178, 0.1);
  }

  /* Navigation buttons - smaller size */
  .swiper-button-prev,
  .swiper-button-next {
    width: 32px !important;
    height: 32px !important;
  }

  .swiper-button-prev:after,
  .swiper-button-next:after {
    font-size: 12px !important;
  }
</style>

<script>
  import Swiper from 'swiper';
  import { Navigation } from 'swiper/modules';
  import 'swiper/css';
  import 'swiper/css/navigation';

  document.addEventListener('DOMContentLoaded', () => {
    const swiperContainer = document.querySelector('.swiper-container');
    if (!swiperContainer) return;

    // Get all catalogs data
    const catalogsData = JSON.parse(swiperContainer.getAttribute('data-catalogs') || '[]');
    
    // Create an array to map slide index to company name
    const slideToCompany: { start: number; end: number; name: string; }[] = [];
    let currentIndex = 0;

    catalogsData.forEach((company: any) => {
      slideToCompany.push({
        start: currentIndex,
        end: currentIndex + company.images.length - 1,
        name: company.name
      });
      currentIndex += company.images.length;
    });

    const updateCompanyName = (slideIndex: number) => {
      const companyNameElement = document.querySelector('.company-name');
      if (!companyNameElement) return;

      const company = slideToCompany.find(c => slideIndex >= c.start && slideIndex <= c.end);
      if (company) {
        companyNameElement.textContent = company.name;
      }
    };

    const swiper = new Swiper(swiperContainer as HTMLElement, {
      modules: [Navigation],
      slidesPerView: 1,
      spaceBetween: 30,
      grabCursor: true,
      touchRatio: 1,
      resistance: true,
      resistanceRatio: 0.85,
      loop: true,
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
      },
      on: {
        init: function(swiper) {
          updateCompanyName(swiper.activeIndex);
        },
        slideChange: function(swiper) {
          updateCompanyName(swiper.activeIndex);
        }
      }
    });
  });
</script> 