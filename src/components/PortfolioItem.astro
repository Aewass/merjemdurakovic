---
import { ArrowRight } from 'lucide-astro';

interface Props {
  number: string;
  category: string;
  title: string;
  description: string;
  tags: string[];
  color: 'purple' | 'rose' | 'emerald';
  images: Array<{ src: string; alt: string; }>;
  name?: string;
  catalogs?: Array<{
    name: string;
    images: Array<{ src: string; alt: string; }>;
  }>;
  singleImageDesign?: boolean;
}

const { number, category, title, description, tags, color, images, name = "", catalogs = [], singleImageDesign = false } = Astro.props;

const colorClasses = {
  purple: {
    text: "text-purple-600",
    border: "border-purple-200",
    shadow: "shadow-purple-200/20",
    gradient: "from-purple-400/20 to-purple-200/20",
    tag: "bg-purple-50"
  },
  rose: {
    text: "text-rose-600",
    border: "border-rose-200",
    shadow: "shadow-rose-200/20",
    gradient: "from-rose-400/20 to-rose-200/20",
    tag: "bg-rose-50"
  },
  emerald: {
    text: "text-emerald-600",
    border: "border-emerald-200",
    shadow: "shadow-emerald-200/20",
    gradient: "from-emerald-400/20 to-emerald-200/20",
    tag: "bg-emerald-50"
  }
};

// Check if catalog items mostly have single images
const hasMostlySingleImages = catalogs && catalogs.length > 0 
  ? catalogs.filter(cat => cat.images.length === 1).length > catalogs.length / 2
  : false;

// Get images for mosaic from catalogs
const mosaicImages = catalogs && catalogs.length > 0
  ? catalogs.slice(0, 5).map(catalog => catalog.images[0])
  : images;

// Determine if we should use the single image design
const useSingleImageDesign = singleImageDesign || hasMostlySingleImages;
---

<div class="grid grid-cols-1 md:grid-cols-2 gap-12 items-center">
  {/* Project Info - Left Side */}
  <div>
    <span class={`${colorClasses[color].text} mb-4 block flex items-center gap-2`}>
      <span class="font-mono">{number}</span>
      <span class="text-gray-300">â€”</span>
      <span>{category}</span>
    </span>
    
    <h3 class="text-4xl font-bold mb-4">{title}</h3>
    <p class="text-gray-600 text-lg mb-8 max-w-2xl">{description}</p>
    
    {/* Tags */}
    <div class="flex flex-wrap gap-3 mb-8">
      {tags.map(tag => (
        <span class={`px-4 py-2 ${colorClasses[color].tag} rounded-full text-gray-900 text-sm`}>
          {tag}
        </span>
      ))}
    </div>

    {/* Add View Category Button */}
    <a
      href={`/category/${name}`}
      class={`
        inline-flex
        items-center
        gap-2
        px-6
        py-3
        rounded-xl
        bg-gray-900
        text-white
        hover:bg-gray-800
        transition-colors
        duration-300
      `}
    >
      <span>View Category</span>
      <ArrowRight class="w-4 h-4" />
    </a>
  </div>

  {/* Project Images - Right Side */}
  {useSingleImageDesign ? (
    /* Single Image Design - Stacked Cards */
    <div class="relative perspective-1000">
      <div class="relative mx-auto w-full max-w-md">
        {mosaicImages.slice(0, 3).map((image, index) => (
          <div 
            class={`
              card-item
              absolute
              inset-0
              bg-white
              rounded-lg
              shadow-lg
              border-2
              ${colorClasses[color].border}
              overflow-hidden
              transition-all
              duration-500
              hover:z-10
              hover:shadow-xl
              hover:-translate-y-2
              hover:rotate-0
            `}
            style={`transform: rotate(${index * 3 - 3}deg) translateY(${index * 8}px); z-index: ${3 - index};`}
          >
            <img 
              src={image.src} 
              alt={image.alt} 
              class="w-full h-full object-cover aspect-[5/3]"
            />
          </div>
        ))}
        <div class="aspect-[5/3] opacity-0"><!-- Spacer div to maintain aspect ratio --></div>
      </div>
      
      {/* Background Element */}
      <div class={`
        absolute 
        -bottom-6 
        -right-6 
        -z-10 
        w-full 
        h-full 
        bg-gradient-to-r 
        rounded-lg 
        opacity-30 
        ${colorClasses[color].gradient}
      `}></div>
    </div>
  ) : (
    /* Mosaic Grid */
    <div class="relative">
      <div class="grid grid-cols-3 gap-3 aspect-[4/3]">
        {mosaicImages.map((image, index) => (
          <div 
            class={`
              mosaic-item
              overflow-hidden 
              rounded-lg 
              bg-white 
              shadow-md 
              border 
              ${colorClasses[color].border}
              transition-all
              duration-300
              hover:shadow-xl
              hover:-translate-y-2
              hover:z-10
              relative
              ${index === 0 ? 'col-span-2 row-span-2' : ''}
            `}
          >
            <div class="w-full h-full relative overflow-hidden">
              <img 
                src={image.src} 
                alt={image.alt} 
                class="w-full h-full object-cover transform transition-transform duration-500 hover:scale-110"
              />
            </div>
            
            {/* Individual image glow effect */}
            <div class={`
              absolute 
              inset-0 
              -z-10
              opacity-0
              bg-gradient-to-r 
              ${colorClasses[color].gradient} 
              blur-md
              scale-110
              transition-opacity 
              duration-300
              pointer-events-none
            `}></div>
          </div>
        ))}
        
        {/* Background Element */}
        <div class={`
          absolute 
          -bottom-4 
          -right-4 
          -z-10 
          w-full 
          h-full 
          bg-gradient-to-r 
          rounded-lg 
          opacity-30 
          ${colorClasses[color].gradient}
        `}></div>
      </div>
    </div>
  )}
</div>

<style>
  .perspective-1000 {
    perspective: 1000px;
  }
  
  .mosaic-item {
    transform-origin: center center;
    backface-visibility: hidden;
  }
  
  .mosaic-item:hover {
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1);
  }
  
  .mosaic-item:hover > div:last-child {
    opacity: 0.7;
  }
  
  .card-item {
    transform-origin: center center;
    backface-visibility: hidden;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  }
</style> 